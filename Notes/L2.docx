**************************Lecture2************************
C++ is a case sensitive language.
; is used to terminate the statement it  is very similar to full stop(.) in english.

Main function is the starting point of the code from where the code execution will start.
    ex: int main(){
        //code will code here.
    }


#include <iostream> through this will till to compiler before compiling that their is a file iostream where their is a function cout() cin()

cout is used for output. cout<<"Hello";  cin>>a; cin for input.

namespace is can say a file in which logic of many function is written. 


Basic code for printing hello world 

#include <iostream>
using namespace std;
int main(){
    cout<<"Hello World";  // to print hello world;
    return 0; // the main function is integer function so we have to return an integer value without this code will run perfectly but to return zero is good programming practice.
}



endl or "\n" used to break the line and go to next line.


// Boilerplate code 
#include <iostream> 
using namespace std; 
int main(){
    return 0; // We have to always write this code to run the file successfully
}

Comment are the part of code but it is ignored by the compiler it the time of execution.


Variable as the container used to store data. Ex : a = 20;


Whenever we define the variable we have to define datatype.

Types of datatype : 
int, float, char, bool, double.

int datatype take 4 bytes of place in memory. 1 is a single bit. 8 is equal to 1 Byte. 8 byte is equal to 32 bits data.

int = 4 Bytes.
char = 1 Bytes. Character is first converted into ASCII value then stored in the memory.
float = 3.14F F is used here to tell the compiler that we want to store float value not the double because by default compiler store as double. It also occupy 4 bytes of memory.


Bool datatype is used to initalise the variable as True or False. True is stored as 1 and False is stored as 0 in memory.

double is store when we store long length data. It store the value of 8 bytes of Data in the memory.

int, float, char, bool and double are primitive datatype.


Typecasting : To convert data from one type to another type.

Implicate conversion : To convert from small byte data to big data.
Ex : char to integer 1 Byte data to 1 Byte data to 4 Byte

Explicate Conversion : To convert data from Big to Small. 
Ex to convert double to integer datatype.
Ex 100.99 to (int)100.99 the value will be 100.


Condition Statements : To include condition we use condition statement.
if is used to check the condition 
if (n>0){ // if condition is true then the rest of the code will run
    cout<<"Positive"<<endl; 
    
    
    //Block of code  To multiple things in code we use {} BLock of code is used to right Statements.
    Statements means what we want to do in this

}

To check multiple condition we use if else if else

if(){
    //code
}
else if(){
    //code
}
else if(){
    //code
}
else if(){
    //code
}
.
.
.
else{
    //code
}

we do not use multiple if to check multiple condition.


Ternary Statement : When we have to check only when condition we can use Ternary Statement.

Syntax : condition ? true condition : false condition

cout<<(n>10 ? "True" : "False");


**********************Lecture 3********************************
Loops : To use or do same things again and again we use Loops 

While Loop : While loop is used when we don't know how many time the loop will run in advance.
while(True){ (Condition)
    //Statements
}
For Loop : It should be used when we know what is the start and end condition.

for(start; end; increment/decrement){
    //code
}




Break : It is used when we want to stop the loop it particular condition.

for(int i=0; i<n; i++){
    if(i==5){
        break //The code will stop when the i will be 5 
    }
    //code
}

Keywords are the special words for the compiler. We cannot use the keywords as the variable name.

******************************Lecture4***********************
Patterns : Never directly asked in the interviews 


// Pattern 1 
    1234 //n=4
    1234
    1234
    1234

In patterns the outer loops defined for how many rows are their in pattern.

To print in a single row the logic will be written in the inner loop.



**************************Lecture5***************************************

function : Block of code that perform specific task
ex : void printHello(){
    cout<<"Hello";
    return 0;
}

it is never executed without begin called 

parameters : parameters are the input for the functions.
Function take same value.


How function are stored in the memory 
There are two types memory 
 1. Stack memory : It is used for static allocation.
 2. Heap memory : It is used for dynamic allocation.


 function are stored in a stack 

 main function automatically called by the compiler we don't have to call it.

 if we have a void function so we can use the return to return the control.

Pass by value: when we call a function their will a another copy of their value is generated. The copy is generated to another different place in the memory 


*****************************Lecture7*************************************

Bitwise Operator : 
Left shift Operator : suppose we have to shift 10<<2 then 10 in binary is 1010 so after shiting to 2 bits it become 101000

Formula : Ans = a*2^b

Right shift Operator : suppose we have to shift the Operator by 10>>2 
so 10 in binary is 1010 then after right shift the operator will become 
0010 

Formula Ans = a/2^b


Data Modifier : change the meaning of datatype

types of Data Modifier : 
long, short, long long, signed, unsigned
**********************Lecture8*****************************

DSA is Stated Basic Notes are completed 




Vectors are similar to array but they are dynamic in nature.


Vectors queue stack are the STL container 
vector declaration : vector <int>vect;




vector Function : 
size : to print the size of vector vec.size()
push_back(1);
pop_back();
at 
back 
front

Static v/s dynamic allocation : 
Static allocation memory is allocated in compile time where we check the syntax. Size is fixed cannot be and Memory allocated is a stack memory 
example is array 

Dynamic allocation : Memory is allocated on the run time and the data is stored in heap memory and it is resize able example is Vectors


Vectors memory allocation When we initalise the vector their is no size allocated but when we push_back the first element in it It will create a vector of size 1. 

Second time when we push_back the second element to the vector a new vector is created of size 2(The size of new vector is double of the size of previous array) and both the elements are inserted in it.
and the old vector is deleted automatically. 



